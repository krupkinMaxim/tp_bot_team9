__all__ = [

    'router'
]
# TODO - –û–ø–∏—à–∏—Ç–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
# –†–∞–±–æ—Ç–∞ c Router - https://docs.aiogram.dev/en/v3.14.0/dispatcher/router.html
# –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Router —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã @router - https://mastergroosha.github.io/aiogram-3-guide/routers/
# –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Router —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä—â–∏–∫ https://stackoverflow.com/questions/77809738/how-to-connect-a-router-in-aiogram-3-x-x#:~:text=1-,Answer,-Sorted%20by%3A

from aiogram import types, Router, F
from aiogram.filters import Command, CommandObject
from .keyboard import main_keyboard   # –∏–º–ø–æ—Ä—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from .callbacks import callback_message  # –∏–º–ø–æ—Ä—Ç –∏–∑ –∫–æ–ª–ª–±–µ–∫–∞
from config import CMC_API_KEY
import requests
import aiohttp

router = Router()


@router.message(Command("price"))
async def price_handler(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–∏–∫–µ—Ä —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/price bitcoin")
        return

    token = command.args.lower()

    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": token,
        "vs_currencies": "usd"
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            if resp.status != 200:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinGecko.")
                return
            data = await resp.json()

    price = data.get(token, {}).get("usd")

    if price is None:
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{token}'. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
    else:
        await message.answer(f"üí∞ –¶–µ–Ω–∞ {token.upper()}: ${price:.4f}")

@router.message(Command("start"))
async def process_start_command(message: types.Message):
    await message.answer(
        f"""
üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–Ø ‚Äî —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

ü™ô –ü–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∫–ª—é—á–µ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
üìà –ü–æ–∫–∞–∂—É —Ç–æ–ø –º–æ–Ω–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞ –¥–µ–Ω—å –∏ –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—É—Ä—Å–æ–º.
üîî –°–∫–æ—Ä–æ —Å–º–æ–∂–µ—à—å –¥–∞–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω—É—é —Ü–µ–Ω—É!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å /help üí°
"""
    )
@router.message(Command("help"))
async def process_help_command(message: types.Message):
    await message.answer(text="""
 –ß—Ç–æ —è —É–º–µ—é?:

–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫, –∏ –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:

‚∏ª

üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîπ /start ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ –º–Ω–æ–π –∏ –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
üîπ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏.

üí∞ /daily ‚Äî —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø-5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç  
üí≤ /price <—Ç–æ–∫–µ–Ω> ‚Äî —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞  
üìâ /change <—Ç–æ–∫–µ–Ω> ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –∑–∞ 24 —á–∞—Å–∞

–ü—Ä–∏–º–µ—Ä—ã:  
/price bitcoin  
/change solana
‚∏ª

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å /daily 
–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –µ—â—ë –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π! üöÄ""", reply_markup= main_keyboard)


@router.message(Command("daily"))
async def daily_handler(message: types.Message):
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": 5,
        "page": 1,
        "sparkline": "false"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as resp:
                if resp.status != 200:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinGecko.")
                    return
                data = await resp.json()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    msg = "üî• –¶–µ–Ω–∞ —Ç–æ–ø 5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è :\n\n"
    for coin in data:
        name = coin.get('name', 'N/A')
        symbol = coin.get('symbol', 'N/A').upper()
        price = coin.get('current_price', 0)
        change = coin.get('price_change_percentage_24h', 0)
        msg += f"{name} ({symbol}): ${price:.2f} ({change:+.2f}%)\n"

    await message.answer(msg)


@router.message(Command("testkey"))
async def test_api_key_handler(message: types.Message):
    if not CMC_API_KEY:
        await message.answer("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CMC_API_KEY.")
        return

    await message.answer(f"üîë –¢–µ–∫—É—â–∏–π API –∫–ª—é—á:\n`{CMC_API_KEY}`", parse_mode="Markdown")

    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
    headers = {
        "Accepts": "application/json",
        "X-CMC_PRO_API_KEY": CMC_API_KEY,
    }
    params = {
        "start": "1",
        "limit": "1",
        "convert": "USD"
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        # –û—Ç–ø—Ä–∞–≤–∏–º –≤ –æ—Ç–≤–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –ø–µ—Ä–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        first_crypto = data["data"][0]
        name = first_crypto["name"]
        price = first_crypto["quote"]["USD"]["price"]

        await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!\n–ü–µ—Ä–≤–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {name}\n–¶–µ–Ω–∞: ${price:.2f}")

    except requests.exceptions.RequestException as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ CoinMarketCap:\n{e}")

@router.message(Command("change"))
async def change_handler(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer("üì© –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/change ethereum`", parse_mode="Markdown")
        return

    token = command.args.lower()
    url = f"https://api.coingecko.com/api/v3/coins/{token}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.")
                    return
                data = await resp.json()

        current_price = data["market_data"]["current_price"]["usd"]
        price_24h_ago = current_price / (1 + (data["market_data"]["price_change_percentage_24h"] / 100))
        change_pct = data["market_data"]["price_change_percentage_24h"]
        change_abs = current_price - price_24h_ago

        arrow = "üìà" if change_pct > 0 else "üìâ"

        msg = (
            f"{arrow} *{data['name']}* –∑–∞ 24—á:\n"
            f"–í—á–µ—Ä–∞: ${price_24h_ago:.2f}\n"
            f"–°–µ–π—á–∞—Å: ${current_price:.2f}\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_pct:+.2f}% (${change_abs:+.2f})"
        )
        await message.answer(msg, parse_mode="Markdown")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        print(e)

# –ó–¥–µ—Å—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
def register_message_handlers():
    '''–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'''
    pass
